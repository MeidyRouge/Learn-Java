package com.company;

public class Sample {
    private int num;
    public int getNum(){return num;}
    private void setNum(int num){this.num = num;}
}

//TIPS
//複雑化・巨大化する要件を簡単にする方法が「分割」
//どのように分割するか？⇒分割の基準として、オブジェクト（クラスとインスタンス）という単位が使われる。
//カプセル化＝オブジェクト指向設計の基本的原則の1つ
//カプセル化：何のためのクラスなのか？というクラスの目的を明確にするために行い、他のクラスに重複するデータや処理がない状態を目指すもの←コピペ乱発コーディングとは対極
//重要なこと：関係するフィールドとメソッドが１つにまとまっていること。BメソッドがAフィールドを使用するなら、そもそもBメソッドはAクラスに存在するべき
//カプセル化は、関係するデータやメソッドを1つにまとめるだけではなく、他のクラスのメソッドによってフィールドの値を直接改変されることを防ぐためにアクセス修飾子を用いて行う、⇒データ隠蔽
//カプセル化とデータ隠蔽はセット

//カプセル化を実現するには、フィールドの公開は行わなず（private)、メソッドを公開（public）する

//まとめ。カプセル化とは、①複雑な構造を単純にするために、関係するフィールド・メソッドを1つにまとめること。②フィールドの改変を防ぐために、データ隠蔽を行うこと。
//フィールドの公開はprivateで、メソッドをpuvlicにすることで実現するオブジェクト指向設計の1つのことである。
